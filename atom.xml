<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>达者自在</title>
  
  <subtitle>天道下济而光明，地道卑而上行</subtitle>
  <link href="https://zhaoming0018.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhaoming0018.github.io/"/>
  <updated>2023-11-11T11:04:47.031Z</updated>
  <id>https://zhaoming0018.github.io/</id>
  
  <author>
    <name>zhaoming0018</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>编写filebeat的processor</title>
    <link href="https://zhaoming0018.github.io/2023/11/11/%E7%BC%96%E5%86%99filebeat%E7%9A%84processor/"/>
    <id>https://zhaoming0018.github.io/2023/11/11/%E7%BC%96%E5%86%99filebeat%E7%9A%84processor/</id>
    <published>2023-11-11T09:14:34.000Z</published>
    <updated>2023-11-11T11:04:47.031Z</updated>
    
    <content type="html"><![CDATA[<p>filebeat提供的processor工具可以实现很多数据转换的功能，那么如何实现一个自己的processor呢？</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先，需要知道如何编译一个filebeat。下载beat的源码，它包含了filebeat：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/elastic/beats.git</span><br></pre></td></tr></table></figure><p>需要有go语言的环境，如今的beat使用的是go的1.20版本。go的安装参考其它往上文档。</p><p>执行编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> filebeat/</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>等待一段时间，如果没有报错并退出，可以看到当前目录下有一个二进制文件filebeat，表明编译成功。</p><p><img src="/images/filebeat.png" alt="filebeat"></p><!--  --><p>创建一个简单的配置文件filebeat.yml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./README.md</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.console:</span></span><br><span class="line">  <span class="attr">pretty:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./filebeat -c filebeat.yml</span><br></pre></td></tr></table></figure><p>启动完成后，可以看到日志被一条条读取出来（实际上非常快），并形成了一个个json对象。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-11-11T09:47:56.651Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;beat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;filebeat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.12.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;offset&quot;</span><span class="punctuation">:</span> <span class="number">1048</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/mike/tmp/filebeat-processors/beats/filebeat/README.md&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[CONTRIBUTING.md](../CONTRIBUTING.md) file.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DESKTOP-VQKJ06I&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;agent&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ephemeral_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cc829461-e0c9-4ef1-a147-247491189763&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3fde326c-7eb2-4878-9272-4a42f12ded5a&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DESKTOP-VQKJ06I&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;filebeat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.12.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ecs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="processor代码格式"><a href="#processor代码格式" class="headerlink" title="processor代码格式"></a>processor代码格式</h2><p>processor的代码主要放在<code>libbeat/processors</code>中。所有的包被<code>libeat/cmd/instance/imports_common.go</code>导入。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Licensed to Elasticsearch B.V. under one or more contributor</span></span><br><span class="line"><span class="comment">// license agreements. See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment">// this work for additional information regarding copyright</span></span><br><span class="line"><span class="comment">// ownership. Elasticsearch B.V. licenses this file to you under</span></span><br><span class="line"><span class="comment">// the Apache License, Version 2.0 (the &quot;License&quot;); you may</span></span><br><span class="line"><span class="comment">// not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">// You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">// software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">// &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">// KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">// specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">// under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/autodiscover/appenders/config&quot;</span> <span class="comment">// Register autodiscover appenders</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/autodiscover/providers/jolokia&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/monitoring/report/elasticsearch&quot;</span> <span class="comment">// Register default monitoring reporting</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/actions&quot;</span>              <span class="comment">// Register default processors.</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/add_cloud_metadata&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/add_formatted_index&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/add_host_metadata&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/add_id&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/add_locale&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/add_observer_metadata&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/add_process_metadata&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/communityid&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/convert&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/decode_duration&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/decode_xml&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/decode_xml_wineventlog&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/dissect&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/dns&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/extract_array&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/fingerprint&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/move_fields&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/ratelimit&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/registered_domain&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/script&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/syslog&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/translate_sid&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/urldecode&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/elastic/beats/v7/libbeat/publisher/includes&quot;</span> <span class="comment">// Register publisher pipeline modules</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>看到的<code>github.com/elastic/beats/v7/libbeat/processors/</code>开头的包就是被导入的processor。</p><p>其中，<code>github.com/elastic/beats/v7/libbeat/processors/actions</code>是个特殊的包，打开<code>libbeat/processors/actions</code>目录，可以看到许多的go文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(base) --- processors/actions ‹main* M?› » ls</span><br><span class="line">add_fields.go       add_network_direction.go       append_test.go          decode_base64_field_test.go    detect_mime_type.go       drop_fields_test.go     rename.go           truncate_fields_test.go</span><br><span class="line">add_fields_test.go  add_network_direction_test.go  common_test.go          decode_json_fields.go          detect_mime_type_test.go  extract_field.go        rename_test.go</span><br><span class="line">add_labels.go       add_tags.go                    copy_fields.go          decode_json_fields_test.go     docs                      extract_field_test.go   replace.go</span><br><span class="line">add_labels_test.go  add_tags_test.go               copy_fields_test.go     decompress_gzip_field.go       drop_event.go             include_fields.go       replace_test.go</span><br><span class="line">add_myname.go       append.go                      decode_base64_field.go  decompress_gzip_field_test.go  drop_fields.go            include_fields_test.go  truncate_fields.go</span><br></pre></td></tr></table></figure><p>每个go文件就是一个processor的源码（也有一些是公共组件源码）。我们创建一个简单processor的工作就从这个目录开始。</p><h2 id="简单的processor说明和创建"><a href="#简单的processor说明和创建" class="headerlink" title="简单的processor说明和创建"></a>简单的processor说明和创建</h2><p>这个processor功能很简单，名称叫做add_my_name，提供一个参数my_name作为键，就可以将其值加入到每个对象中。如下是使用add_my_name的配置文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./README.md</span></span><br><span class="line"></span><br><span class="line"><span class="attr">processors:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">add_my_name:</span></span><br><span class="line">    <span class="attr">my_name:</span> <span class="string">Mike</span></span><br><span class="line"></span><br><span class="line"><span class="attr">output.console:</span></span><br><span class="line">  <span class="attr">pretty:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>libbeat/processors/actions</code>中增加一个<code>add_my_name.go</code>文件，基本内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> actions</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/elastic/beats/v7/libbeat/beat&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/checks&quot;</span></span><br><span class="line">jsprocessor <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/script/javascript/module/processor&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/elastic/beats/v7/libbeat/publisher&quot;</span></span><br><span class="line">conf <span class="string">&quot;github.com/elastic/elastic-agent-libs/config&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/elastic/elastic-agent-libs/logp&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>我们的processor只有一个my_name的字段，但是也需要用一个结构体来定义一下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> addMyNameFieldsConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">MyName <span class="type">string</span> <span class="string">`config:&quot;my_name&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意字段名MyName需要大写，不然就是私有属性，后续的处理工具无法获取。而<code>config:&quot;my_name&quot;</code>则是定义了字段名。</p><p>还需要定义一个结构体将配置放在里面，它将作为一个对象，实现后续必须的一些方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> addMyNameFields <span class="keyword">struct</span> &#123;</span><br><span class="line">config addMyNameFieldsConfig</span><br><span class="line">logger *logp.Logger</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个结构体是很灵活的，可以增加更多的属性，只是这里我们仅需要一个config表示配置，和一个logger用来打印日志。</p><p>接下来定义初始化函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">processors.RegisterPlugin(<span class="string">&quot;add_my_name&quot;</span>,</span><br><span class="line">checks.ConfigChecked(NewAddMyNameFields,</span><br><span class="line">checks.RequireFields(<span class="string">&quot;my_name&quot;</span>)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>init()</code>是go中的初始化函数，每个文件被导入的时候就会调用这个函数。在<code>init()</code>中，我们将NewAddMyNameFields函数注册到processors中。在注册的时候，还调用了checks.<code>ConfigChecked(NewAddMyNameFields,checks.RequireFields(&quot;my_name&quot;))</code>对配置进行了检查，判断有没有”my_name”字段。</p><p>如果不需要检查字段，可以像这样写：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">processors.RegisterPlugin(<span class="string">&quot;add_my_name&quot;</span>,NewAddMyNameFields)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NewAddMyNameFields是需要我们来定义的，定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAddMyNameFields</span><span class="params">(c *conf.C)</span></span> (beat.Processor, <span class="type">error</span>) &#123;</span><br><span class="line">config := addMyNameFieldsConfig&#123;&#125;</span><br><span class="line">err := c.Unpack(&amp;config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to unpack the add_my_name configuration: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f := &amp;addMyNameFields&#123;</span><br><span class="line">config: config,</span><br><span class="line">logger: logp.NewLogger(<span class="string">&quot;add_my_name&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数接收一个类型为<code>conf.C</code>的参数，返回了两个内容，第一个是<code>beat.Processor</code>的对象，第二个是error。</p><p>注意前两行的代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config := addMyNameFieldsConfig&#123;&#125;</span><br><span class="line">err := c.Unpack(&amp;config)</span><br></pre></td></tr></table></figure><p>第一行实例化了一个<code>addMyNameFieldsConfig</code>的结构体，而第二行的<code>c.Unpack(&amp;config)</code>将我们配置文件中的内容（也就是c）解压到了config对象中，执行之后，config中将会多出”my_name: Mike”这个字段。</p><p>随后，需要实现<code>addMyNameFields</code>的两个方法Run和String，让它称为一个真正的<code>beat.Processor</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *addMyNameFields)</span></span> Run(event *beat.Event) (*beat.Event, <span class="type">error</span>) &#123;</span><br><span class="line">_, err := event.PutValue(<span class="string">&quot;my_name&quot;</span>, f.config.MyName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errMsg := fmt.Errorf(<span class="string">&quot;could not put value: %s: %v, %w&quot;</span>, <span class="string">&quot;my_name&quot;</span>, f.config.MyName, err)</span><br><span class="line"><span class="keyword">if</span> publisher.LogWithTrace() &#123;</span><br><span class="line">f.logger.Debug(errMsg.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> event, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *addMyNameFields)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;add_my_name=&quot;</span> + fmt.Sprintf(<span class="string">&quot;%+v&quot;</span>, f.config.MyName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Run()</code>方法是具体的处理过程。它传入了一个<code>beat.Event</code>，并返回了一个<code>beat.Event</code>。我们的功能实现起来很简单，只需要一句<code>_, err := event.PutValue(&quot;my_name&quot;, f.config.MyName)</code>，其它的代码都是在做一些错误处理。<code>String()</code>方法就是用来表示<code>addMyNameFields</code>对象的。</p><p>可以看到，processor就是利用我们创建的实现<code>Processor</code>接口的对象，调用其<code>Run()</code>方法来处理<code>beat.Event</code>对象。</p><p>为了实现更多功能，可以了解一下<code>beat.Event</code>的一些基本方法，包括：</p><ol><li>func (e *Event) GetValue(key string) (interface{}, error)</li></ol><p>获取key对应的value值。</p><ol start="2"><li>func (e *Event) PutValue(key string, v interface{}) (interface{}, error)</li></ol><p>设置key的值为v。</p><ol start="3"><li>func (e *Event) Delete(key string) error</li></ol><p>删除一个key。</p><ol start="4"><li>func (e *Event) HasKey(key string) (bool, error)</li></ol><p>判断事件中是否有某个key。</p><ol start="5"><li>func (e *Event) Clone() *Event</li></ol><p>克隆一个事件对象，有时候为了防止数据在处理过程中被污染，可以先clone一份处理前的事件对象，如果出现错误，可以回退。</p><ol start="6"><li>func (e *Event) setTimestamp(v interface{}) (interface{}, error)</li></ol><p>可以设置<code>@timestamp</code>属性，v可以是time.Time对象或common.Time对象。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>完整的代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Licensed to Elasticsearch B.V. under one or more contributor</span></span><br><span class="line"><span class="comment">// license agreements. See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment">// this work for additional information regarding copyright</span></span><br><span class="line"><span class="comment">// ownership. Elasticsearch B.V. licenses this file to you under</span></span><br><span class="line"><span class="comment">// the Apache License, Version 2.0 (the &quot;License&quot;); you may</span></span><br><span class="line"><span class="comment">// not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">// You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">// software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">// &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">// KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">// specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">// under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> actions</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/elastic/beats/v7/libbeat/beat&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/checks&quot;</span></span><br><span class="line">jsprocessor <span class="string">&quot;github.com/elastic/beats/v7/libbeat/processors/script/javascript/module/processor&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/elastic/beats/v7/libbeat/publisher&quot;</span></span><br><span class="line">conf <span class="string">&quot;github.com/elastic/elastic-agent-libs/config&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/elastic/elastic-agent-libs/logp&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> addMyNameFields <span class="keyword">struct</span> &#123;</span><br><span class="line">config addMyNameFieldsConfig</span><br><span class="line">logger *logp.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> addMyNameFieldsConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">MyName <span class="type">string</span> <span class="string">`config:&quot;my_name&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">processors.RegisterPlugin(<span class="string">&quot;add_my_name&quot;</span>,</span><br><span class="line">checks.ConfigChecked(NewAddMyNameFields,</span><br><span class="line">checks.RequireFields(<span class="string">&quot;my_name&quot;</span>)))</span><br><span class="line"></span><br><span class="line">jsprocessor.RegisterPlugin(<span class="string">&quot;AddMyName&quot;</span>, NewAddMyNameFields)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewAddMyNameFields</span><span class="params">(c *conf.C)</span></span> (beat.Processor, <span class="type">error</span>) &#123;</span><br><span class="line">config := addMyNameFieldsConfig&#123;&#125;</span><br><span class="line">err := c.Unpack(&amp;config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;failed to unpack the add_my_name configuration: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f := &amp;addMyNameFields&#123;</span><br><span class="line">config: config,</span><br><span class="line">logger: logp.NewLogger(<span class="string">&quot;add_my_name&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *addMyNameFields)</span></span> Run(event *beat.Event) (*beat.Event, <span class="type">error</span>) &#123;</span><br><span class="line">_, err := event.PutValue(<span class="string">&quot;my_name&quot;</span>, f.config.MyName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">errMsg := fmt.Errorf(<span class="string">&quot;could not put value: %s: %v, %w&quot;</span>, <span class="string">&quot;my_name&quot;</span>, f.config.MyName, err)</span><br><span class="line"><span class="keyword">if</span> publisher.LogWithTrace() &#123;</span><br><span class="line">f.logger.Debug(errMsg.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> event, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *addMyNameFields)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;add_my_name=&quot;</span> + fmt.Sprintf(<span class="string">&quot;%+v&quot;</span>, f.config.MyName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译并测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> filebeat/</span><br><span class="line">make</span><br><span class="line"><span class="built_in">rm</span> -rf data/</span><br><span class="line">./filebeat -c filebeat.yml</span><br></pre></td></tr></table></figure><p>在启动之前需要执行一次<code>rm -rf data/</code>，因为filebeat是断点续传的，断点就记录在data&#x2F;目录中，删掉它才可以重新采集文件。</p><p>你将看到类似如下的结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-11-11T10:39:40.235Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;beat&quot;</span><span class="punctuation">:</span> <span class="string">&quot;filebeat&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.12.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;log&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ecs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;host&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DESKTOP-VQKJ06I&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;agent&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.12.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ephemeral_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;07dbf3a7-21e7-4c54-b0f0-c8f859b672da&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1b92ed52-69c5-4789-9eb5-2bf1a1b5360d&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DESKTOP-VQKJ06I&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;filebeat&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;my_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mike&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;log&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/zhaoyiming/tmp/filebeat-processors/beats/filebeat/README.md&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;offset&quot;</span><span class="punctuation">:</span> <span class="number">1048</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[CONTRIBUTING.md](../CONTRIBUTING.md) file.&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>我们已经在其中加上了<code>&quot;my_name&quot;: &quot;Mike&quot;,</code>这一行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;filebeat提供的processor工具可以实现很多数据转换的功能，那么如何实现一个自己的processor呢？&lt;/p&gt;
&lt;h2 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h2&gt;&lt;p&gt;首先，需</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++ Prime Plus 01</title>
    <link href="https://zhaoming0018.github.io/2023/09/20/C++%20PrimePlus%2001/"/>
    <id>https://zhaoming0018.github.io/2023/09/20/C++%20PrimePlus%2001/</id>
    <published>2023-09-20T06:05:03.000Z</published>
    <updated>2023-09-20T09:42:25.646Z</updated>
    
    <content type="html"><![CDATA[<p>第一段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* displays a message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>                           <span class="comment">// a PREPROCESSOR directive</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;                                 <span class="comment">// function header</span></span><br><span class="line">    <span class="comment">// start of function body</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std;                      <span class="comment">// make definitions visible</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello world!&quot;</span> &lt;&lt; endl;           <span class="comment">// message</span></span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Comme up and C++ me some time.&quot;</span></span><br><span class="line">         &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;You won&#x27;t regret it! &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the output window closes before you can read it,</span></span><br><span class="line">    <span class="comment">// add the following code:</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Press any key to continue.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cin.<span class="built_in">get</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                                 <span class="comment">// terminate main()</span></span><br><span class="line">&#125;                                             <span class="comment">// end of function body</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>C++ Prime Plus 00</title>
    <link href="https://zhaoming0018.github.io/2023/09/20/C++%20Prime%20Plus%2000/"/>
    <id>https://zhaoming0018.github.io/2023/09/20/C++%20Prime%20Plus%2000/</id>
    <published>2023-09-20T05:48:11.000Z</published>
    <updated>2023-09-20T12:15:19.259Z</updated>
    
    <content type="html"><![CDATA[<p>规划一下《C++ Prime Plus》（第六版）这本书的学习笔记。</p><p>从目录看一共18章，除去第一章预备知识，每章一篇我们写17篇笔记，如果过于复杂的可能会拆成2篇来写。</p><p>笔记不会像原文那么细致，只会抽取一些关键概念和代码进行说明，一些历史内容就跳过了。此外编译环境会使用linux，别的操作系统的相关内容也不会过多说明。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;规划一下《C++ Prime Plus》（第六版）这本书的学习笔记。&lt;/p&gt;
&lt;p&gt;从目录看一共18章，除去第一章预备知识，每章一篇我们写17篇笔记，如果过于复杂的可能会拆成2篇来写。&lt;/p&gt;
&lt;p&gt;笔记不会像原文那么细致，只会抽取一些关键概念和代码进行说明，一些历史内容就</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>gorm使用</title>
    <link href="https://zhaoming0018.github.io/2023/07/06/gorm%E4%BD%BF%E7%94%A8/"/>
    <id>https://zhaoming0018.github.io/2023/07/06/gorm%E4%BD%BF%E7%94%A8/</id>
    <published>2023-07-06T09:57:36.000Z</published>
    <updated>2023-07-07T12:23:39.163Z</updated>
    
    <content type="html"><![CDATA[<p>官网：<a href="https://gorm.io/docs/index.html">https://gorm.io/docs/index.html</a></p><p>概览功能：</p><ol><li>全特征的ORM</li><li>关联：拥有一个（Has One），拥有很多（Has Many），属于（Belongs To），多对多（Many To Many），多态（Polymorphism），单表继承（Single-table inheritance）</li><li>钩子（Before&#x2F;After Create&#x2F;Save&#x2F;Update&#x2F;Delete&#x2F;Find）</li><li>即时加载（Preload，Joins）</li><li>事务，嵌套事务，保存点，回滚到保存点</li><li>上下文，预编译语句模式，干跑（DryRun）模式</li><li>批量插入，在批次中查找，使用映射进行查找或创建，使用SQL表达式和Context Valuer进行CRUD</li><li>SQL构建，更新插入（Upsert），锁定，优化器&#x2F;索引&#x2F;注释提示，命名参数，子查询</li><li>组合主键，索引，约束</li><li>自动迁移</li><li>日志</li><li>扩展的、灵活的插件API：数据库解析（多数据库、读写分离）&#x2F;Prometheus</li><li>每一个特性都有测试</li><li>开发友好</li></ol><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u gorm.io/gorm</span><br><span class="line">go get -u gorm.io/driver/sqlite</span><br></pre></td></tr></table></figure><p>声明模型：</p><p>模型（Model）是一个普通的go语言结构体。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">  ID           <span class="type">uint</span></span><br><span class="line">  Name         <span class="type">string</span></span><br><span class="line">  Email        *<span class="type">string</span></span><br><span class="line">  Age          <span class="type">uint8</span></span><br><span class="line">  Birthday     *time.Time</span><br><span class="line">  MemberNumber sql.NullString</span><br><span class="line">  ActivatedAt  sql.NullTime</span><br><span class="line">  CreatedAt    time.Time</span><br><span class="line">  UpdatedAt    time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>约定：</p><p>在GORM中，通常会用ID作为主键，还会使用复数形式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;官网：&lt;a href=&quot;https://gorm.io/docs/index.html&quot;&gt;https://gorm.io/docs/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;概览功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全特征的ORM&lt;/li&gt;
&lt;li&gt;关联：拥有一个（Has O</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>sarama消费组使用方法</title>
    <link href="https://zhaoming0018.github.io/2023/06/03/sarama%E6%B6%88%E8%B4%B9%E7%BB%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://zhaoming0018.github.io/2023/06/03/sarama%E6%B6%88%E8%B4%B9%E7%BB%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</id>
    <published>2023-06-03T11:44:23.000Z</published>
    <updated>2023-06-05T13:49:55.713Z</updated>
    
    <content type="html"><![CDATA[<p>sarama是开源的go语言使用kafka的库，可以帮助我们完成消费组的定义。</p><h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><p>在使用之前需要先导入包：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;github.com/Shopify/sarama&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这样我们就可以使用sarama包了。</p><h3 id="日志设置"><a href="#日志设置" class="headerlink" title="日志设置"></a>日志设置</h3><p>在使用之初，日志是一个重要的了解运行状态的工具，因此我们把日志打开。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">&quot;log&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/Shopify/sarama&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">sarama.Logger = log.New(os.Stdout, <span class="string">&quot;[sarama] &quot;</span>, log.LstdFlags)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>log.New</code>方法创建了一个log.Logger对象，sarama.Logger便使用这个对象来进行日志打印。三个参数的含义如下：</p><ul><li><p>os.Stdout表示将日志输出到标准输出里；</p></li><li><p><code>&quot;[sarama] &quot;</code>会显示在每个日志的开头；</p></li><li><p>log.LstdFlags表示日志的时间按标准（std）格式输出，标准格式类似<code>2006/01/02 15:04:05</code>;</p></li></ul><p><code>sarama.Logger</code>的默认值为<code>log.New(io.Discard, &quot;[Sarama] &quot;, log.LstdFlags)</code>，也就是丢弃了。</p><p>在srama的源码中，会用<code>Logger.Print</code>、<code>Logger.Printf</code>、<code>Logger.Println</code>进行日志打印。</p><h3 id="消费组与消费者"><a href="#消费组与消费者" class="headerlink" title="消费组与消费者"></a>消费组与消费者</h3><p>为了实现基于消费组的消费功能，我们要创建一个消费组实例，再利用消费组创建消费者实例。</p><p>创建消费组的接口如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewConsumerGroup</span><span class="params">(addrs []<span class="type">string</span>, groupID <span class="type">string</span>, config *Config)</span></span> (ConsumerGroup, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>它接收三个参数：addrs、groupID和config。</p><ul><li><p>addrs就是broker的地址，可以有多个；</p></li><li><p>groupID需要你自己取个名字，这个将可以通过kafka的接口查询出来；</p></li><li><p>config则是消费组的配置，配置很多，稍后会介绍。</p></li></ul><p>有了消费组（例如存为变量<code>client</code>），就可以创建消费组了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ConsumerGroup <span class="keyword">interface</span> &#123;</span><br><span class="line">    Consume(ctx context.Context, topics []<span class="type">string</span>, handler ConsumerGroupHandler) <span class="type">error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是ConsumerGroup接口的Consume方法，它接收三个参数ctx、topics和handler。topics就是kafka的主题，可以配置多个，我们需要了解ctx和handler有什么作用。</p><h4 id="关于上下文"><a href="#关于上下文" class="headerlink" title="关于上下文"></a>关于上下文</h4><p>ctx的类型是context.Context，也就是上下文，将多个协程装入一个上下文中，就可以利用这个上下文对其中的协程进行一些统一的操作，例如发送取消信号、定时操作和传输数据等。</p><p>sarama一般使用上下文来管理消费者协程的停止操作，所以会定义如下的上下文：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br></pre></td></tr></table></figure><p>我们不要陷入概念之中，只要知道将ctx传给Consume之后，这个Consume就被注册到了ctx这个上下文之中了，此时如果主协程调用<code>cancel()</code>，Consume协程就会收到一个<code>ctx.Done()</code>的协程信号，Consume就可以根据这个信号进行操作，通常是关闭这个Consume的协程（注意仅仅是信号，不会实际进行操作）。</p><h4 id="关于ConsumerGroupHandler"><a href="#关于ConsumerGroupHandler" class="headerlink" title="关于ConsumerGroupHandler"></a>关于ConsumerGroupHandler</h4><p>Handler一般表明一种异步处理的编程模式，你将需要针对不同的事件来实现函数，ConsumerGroupHandler同样也是如此，它是一个interface，需要实现3个方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Setup(ConsumerGroupSession) <span class="type">error</span></span><br><span class="line"></span><br><span class="line">Cleanup(ConsumerGroupSession) <span class="type">error</span></span><br><span class="line"></span><br><span class="line">ConsumeClaim(ConsumerGroupSession, ConsumerGroupClaim) <span class="type">error</span></span><br></pre></td></tr></table></figure><p>当启动了一个消费者后，便进入了一个会话（session），Setup便是进入会话后的初始操作，你可以在这里打印个消息表示已经开启了一个消费者的会话，当然更重要的可能是一些协程间的信号同步。</p><p>对应的，Cleanup就是在消费完成之后可以进行的操作，你同样可以打印个消息表示这个会话结束了。</p><p>ConsumerGroupSession是一个接口类型，里面包含了如下函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ConsumerGroupSession <span class="keyword">interface</span> &#123;</span><br><span class="line">    Claims() <span class="keyword">map</span>[<span class="type">string</span>][]<span class="type">int32</span></span><br><span class="line">    MemberID() <span class="type">string</span></span><br><span class="line">    GenerationID() <span class="type">int32</span></span><br><span class="line">    MarkOffset(topic <span class="type">string</span>, partition <span class="type">int32</span>, offset <span class="type">int64</span>, metadata <span class="type">string</span>)</span><br><span class="line">    Commit()</span><br><span class="line">    ResetOffset(topic <span class="type">string</span>, partition <span class="type">int32</span>, offset <span class="type">int64</span>, metadata <span class="type">string</span>)</span><br><span class="line">    MarkMessage(msg *ConsumerMessage, metadata <span class="type">string</span>)</span><br><span class="line">    Context() context.Context</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当一个消费者组启动时，它会与 Kafka 服务器进行协商，以确定每个消费者所负责的分区。这个过程被称为 “rebalance”（重新平衡），其中分区被重新分配给消费者。在重新平衡之后，每个消费者将被指派一组分区，它们成为这些分区的 “claimant”（索取者）或 “owner”（所有者）。这里的<code>Claims</code>变量是一个map，key为topic的名字，value是对应的分区序号。</p><p>我们通常需要使用<code>MarkMessage</code>函数标记消息已经处理完成。也会使用<code>Context</code>函数来获取上下文，处理上下文的<code>Done()</code>信号。</p><p>接下来的ConsumeClaim函数，除了接收ConsumerGroupSession外，还接收了一个类型为ConsumerGroupClaim的参数，这个类型的定义为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ConsumerGroupClaim <span class="keyword">interface</span> &#123;</span><br><span class="line">    <span class="comment">// 获取主题名</span></span><br><span class="line">Topic() <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// claim对应的分区</span></span><br><span class="line">Partition() <span class="type">int32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 起始偏移量</span></span><br><span class="line">InitialOffset() <span class="type">int64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 高水位偏移量，简单来说就是消费到哪了</span></span><br><span class="line">HighWaterMarkOffset() <span class="type">int64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息通道</span></span><br><span class="line">Messages() &lt;-<span class="keyword">chan</span> *ConsumerMessage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会使用<code>Message()</code>函数返回的channel进行消息处理。通道里获取的变量是ConsumerMessage的指针类型，定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ConsumerMessage <span class="keyword">struct</span> &#123;</span><br><span class="line">Headers        []*RecordHeader <span class="comment">// only set if kafka is version 0.11+</span></span><br><span class="line">Timestamp      time.Time       <span class="comment">// only set if kafka is version 0.10+, inner message timestamp</span></span><br><span class="line">BlockTimestamp time.Time       <span class="comment">// only set if kafka is version 0.10+, outer (compressed) block timestamp</span></span><br><span class="line"></span><br><span class="line">Key, Value []<span class="type">byte</span></span><br><span class="line">Topic      <span class="type">string</span></span><br><span class="line">Partition  <span class="type">int32</span></span><br><span class="line">Offset     <span class="type">int64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到一些必要的信息，包括Key、Value、主题、分区、偏移量，都在其中。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>提供给消费者的配置通过如下方式创建：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config := sarama.NewConfig()</span><br></pre></td></tr></table></figure><p>需要设置的属性包括：</p><ol><li><p>config.Version，版本设置；</p></li><li><p>config.Consumer.Group.Rebalance.GroupStrategies：rebalance策略，包含三种策略：range（默认）、roundrobin和stick，分别需要如下设置：</p></li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config.Consumer.Group.Rebalance.GroupStrategies = []sarama.BalanceStrategy&#123;sarama.NewBalanceStrategyRange()&#125;</span><br><span class="line">config.Consumer.Group.Rebalance.GroupStrategies = []sarama.BalanceStrategy&#123;sarama.NewBalanceStrategyRoundRobin()&#125;</span><br><span class="line">config.Consumer.Group.Rebalance.GroupStrategies = []sarama.BalanceStrategy&#123;sarama.NewBalanceStrategySticky()&#125;</span><br></pre></td></tr></table></figure><p>range策略是默认的策略，它的思路是按照分区均匀分给现在的消费者。例如有6个分区，分给3个消费者，那第一个消费者消费p0和p1，第二个消费p2和p3，第三个消费p4和p5。</p><p>roundrobin策略就是一个综合了topic和分区的均匀分配策略，假如有2个topic为t0、t1，3个分区p0、p1、p2，那么就凑成了6项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(t0p0, t0p1, t0p2, t1p0, t1p1, t1p2)</span><br></pre></td></tr></table></figure><p>那么如果有2个消费者，则<code>(t0p0, t0p2, t1p1)</code>分给第一个，<code>(t0p1, t1p0, t1p2)</code>分给第二个。</p><p>stick策略是对于每个topic，其对应的分区都均匀分配，分配策略和range相同。</p><ol start="3"><li>config.Consumer.Offsets.Initial，从什么位置开始消费，可以选择sarama.OffsetNewest（最新的位置）和sarama.OffsetOldest（最早的位置）。</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>sarama仓库提供了例子：<a href="https://github.com/Shopify/sarama/blob/main/examples/consumergroup/main.go%E3%80%82">https://github.com/Shopify/sarama/blob/main/examples/consumergroup/main.go。</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;sarama是开源的go语言使用kafka的库，可以帮助我们完成消费组的定义。&lt;/p&gt;
&lt;h3 id=&quot;导入包&quot;&gt;&lt;a href=&quot;#导入包&quot; class=&quot;headerlink&quot; title=&quot;导入包&quot;&gt;&lt;/a&gt;导入包&lt;/h3&gt;&lt;p&gt;在使用之前需要先导入包：&lt;/p&gt;
&lt;f</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ansible的build_docker模块</title>
    <link href="https://zhaoming0018.github.io/2023/05/31/ansible%E7%9A%84build-docker%E6%A8%A1%E5%9D%97/"/>
    <id>https://zhaoming0018.github.io/2023/05/31/ansible%E7%9A%84build-docker%E6%A8%A1%E5%9D%97/</id>
    <published>2023-05-31T13:02:01.000Z</published>
    <updated>2023-05-31T13:57:56.611Z</updated>
    
    <content type="html"><![CDATA[<p>ansible的docker_image模块提供了远程执行docker构建镜像的功能。</p><p>我们准备一个hosts文件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.0.0.1</span><br></pre></td></tr></table></figure><p>可以用如下的指令进行构建：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible -i hosts 10.0.0.1 -m docker_image -a &#x27;name=ansible-build tag=v1 build=&quot;path=/home/zhaoyiming/tmpdocker/Dockerfile pull=yes&quot; source=build&#x27;</span><br></pre></td></tr></table></figure><p>该指令执行的前提是在机器<code>10.0.0.1</code>上存在<code>/home/zhaoyiming/tmpdocker/Dockerfile</code>文件（而不是控制端）。</p><p>这里的几个模块参数很容易理解：</p><ul><li>name: 构造出来的镜像名字；</li><li>tag: 构造胡来的镜像的tag；</li><li>build.path: 使用的Dockerfile文件路径，如果默认使用Dockerfile文件，可以省略为<code>path=/home/zhaoyiming/tmpdocker/</code>;</li><li>build.pull: 这个指标有些模糊，官网说的是会执行FROM的镜像的pull；</li><li>source: 这个镜像的来源，这里的build就表明是用<code>docker build</code>的方式构建出来的，还有load、pull、local的方式；</li></ul><p>需要注意<code>build=&quot;path=xx pull=xx&quot;的模式</code>。用playbook的方式写起来会更加方便：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">docker_image:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">ansible-build</span></span><br><span class="line">        <span class="attr">tag:</span> <span class="string">v1</span></span><br><span class="line">        <span class="attr">build:</span>  </span><br><span class="line">          <span class="attr">path:</span> <span class="string">/home/zhaoyiming/tmpdocker/Dockerfile</span></span><br><span class="line">          <span class="attr">pull:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">build</span></span><br></pre></td></tr></table></figure><p>输出的内容类似：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span> | SUCCESS =&gt; <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ansible_facts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;discovered_interpreter_python&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/python&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;changed&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;image&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>更加详细的参数说明可以参考<a href="https://docs.ansible.com/ansible/latest/collections/community/docker/index.html">Community.Docker — Ansible Documentation</a>。</p><p>我们可以将<code>Dockerfile</code>文件的传输、构建和删除写在一个playbook里：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">copy</span> <span class="string">Dockerfile</span> <span class="string">to</span> <span class="string">Docker</span> <span class="string">system</span></span><br><span class="line">        <span class="attr">copy:</span></span><br><span class="line">            <span class="attr">src:</span> <span class="string">/home/zhaoyiming//workspace/ansible-docker/Dockerfile</span></span><br><span class="line">            <span class="attr">dest:</span>  <span class="string">/home/zhaoyiming/tmpdocker/Dockerfile</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span> <span class="string">image</span></span><br><span class="line">      <span class="attr">docker_image:</span> </span><br><span class="line">        <span class="attr">name:</span> <span class="string">ansible-build</span></span><br><span class="line">        <span class="attr">tag:</span> <span class="string">v1</span></span><br><span class="line">        <span class="attr">build:</span>  </span><br><span class="line">          <span class="attr">path:</span> <span class="string">/home/zhaoyiming/tmpdocker/Dockerfile</span></span><br><span class="line">          <span class="attr">pull:</span> <span class="literal">yes</span></span><br><span class="line">        <span class="attr">source:</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">delete</span> <span class="string">Dockerfile</span></span><br><span class="line">        <span class="attr">file:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/home/zhaoyiming/tmpdocker/Dockerfile</span></span><br><span class="line">            <span class="attr">state:</span> <span class="string">absent</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ansible的docker_image模块提供了远程执行docker构建镜像的功能。&lt;/p&gt;
&lt;p&gt;我们准备一个hosts文件：&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    
  </entry>
  
</feed>
